<!doctype html>
<html>
  <head>
    <title>待ち合わせマップ: The chat and map with Socket.IO</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
    <link rel="stylesheet" href="http://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.css" />
    <style>
      * { margin: 0; padding: 0; box-sizing: border-box; }
      html, body {
        font: 26px "Meiryo", Helvetica, Arial;
        height: 100%;
        width: 100%;
        margin: 0;
        padding: 0;
      }
      /*form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 50%; }*/
      form { background: #E6FAFA; padding: 3px; bottom: 0; width: 100%; font-size: 64px; }
      form input { border: 0; padding: 10px; width: 80%; margin-left: .5%; margin-right: 1%; }
      form button { width: 18%; background: #00D0CE; color: #fff; border: none; padding: 10px; }
      #messages { list-style-type: none; margin: 0; padding: 0; height: 600px; overflow: scroll; }
      #messages li { padding: 5px 10px; }
      #messages li:nth-child(odd) { background: #E6FAFA; }

      #head {background: linear-gradient(to right, #00D0CE, #008382); padding: 3px; bottom: 0; width: 100%; }
      .title { padding: 5px 3px 0 10px; font-size: 32px; color: #fff; }
      .mylocation { margin-left: 10px; margin-top: 80px; z-index: 999; display: none; }
      .mylocation-icon { height: 10px; width: 10px;}

      #map { margin: 0; padding: 0; height: 600px; width: 100%; }
      p { font-size: 26px; }

      /*.leaflet-marker-icon {
        border-radius: 12px;
        -webkit-border-radius: 12px;
        -moz-border-radius: 12px;
        border: 8px #00D0CE solid;
        box-shadow: 0 8px 3px rgba(0,0,0,0.4);
      }*/
      .leaflet-marker-icon {
        border-radius: 40px;
        -webkit-border-radius: 40px;
        -moz-border-radius: 40px;
        border: 4px #fff solid;
        box-shadow: 0 0 0 2px #00D0CE, 0 8px 5px rgba(0,0,0,0.4);
        z-index: 999999999;
      }

      #login {
        position: absolute;
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(to right, #00D0CE, #008382);
        /*background:-webkit-gradient(linear, 80% 20%, 10% 21%, from(#00D0CE), to(#008382));*/
      }
      .login-btn {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        margin: auto;
        height: 100px;
        max-width: 100%;
        max-height: 100%;
        text-align: center;
      }
      #status {
        font: 48px "Meiryo", Helvetica, Arial;
        color: white;
      }
      #rooms {
        display: none;
      }
      #app {
        display: none;
      }
      .member-icon {
        border-radius: 40px;
        -webkit-border-radius: 40px;
        -moz-border-radius: 40px;
        border: 4px #fff solid;
        box-shadow: 0 0 0 2px #00D0CE;
        /*z-index: 999999999;*/
      }
    </style>
  </head>
  <body>
    <div id="login">
      <div class="login-btn">
        <div id="status">アプリを使うには<br>Facebookログインしてね！</div>
        <fb:login-button scope="public_profile,email,user_friends,read_mailbox,read_page_mailboxes,manage_pages" onlogin="checkLoginState();">
        </fb:login-button>
      </div>
    </div>

    <div id="rooms">
      <div class="row">
        <div class="col-md-12">
          <div id="head">
            <p class="title"><b>待ち合わせおしゃべりマップ</b></p>
            <p></p>
          </div>
          <div class="room1 panel panel-default">
            <div class="panel-heading"><b>るーむ１</b></div>
            <div class="panel-body"></div>
          </div>
          <div class="room2 panel panel-default">
            <div class="panel-heading"><b>るーむ２</b></div>
            <div class="panel-body"></div>
          </div>
          <div class="room3 panel panel-default">
            <div class="panel-heading"><b>るーむ３</b></div>
            <div class="panel-body"></div>
          </div>
          <div class="room4 panel panel-default">
            <div class="panel-heading"><b>るーむ４</b></div>
            <div class="panel-body"></div>
          </div>
          <div class="room5 panel panel-default">
            <div class="panel-heading"><b>るーむ５</b></div>
            <div class="panel-body"></div>
          </div>
        </div>
      </div>
    </div>

    <div id="app">
      <div class="row">
        <div class="col-md-12">
          <div id="head">
            <p class="title"><b>待ち合わせおしゃべりマップ</b></p>
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-6">
          <div id="map">
            <div class="mylocation leaflet-bar leaflet-control">
              <a href="#"><img class="mylocation-icon" src="images/mylocation.png"/></a>
            </div>
          </div>
        </div>
        <div class="col-md-6">
          <ul id="messages"></ul>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <form action="">
            <input id="m" autocomplete="off" placeholder="" /><button>送信</button>
          </form>
        </div>
      </div>
    </div>

    <script src="https://cdn.socket.io/socket.io-1.2.0.js"></script>
    <script src="http://code.jquery.com/jquery-1.11.1.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.js"></script>
    <script src="http://cdn.jsdelivr.net/leaflet.esri/latest/esri-leaflet.js"></script>
    <script>
      // Facebook ログイン

      var myid = "";
      var profile_img_url = "";
      var mytoken = "";
      var myname = "";
      var conversations = [];

      // This is called with the results from from FB.getLoginStatus().
      function statusChangeCallback(response) {
        console.log('statusChangeCallback');
        console.log(response);
        // The response object is returned with a status field that lets the
        // app know the current login status of the person.
        // Full docs on the response object can be found in the documentation
        // for FB.getLoginStatus().
        if (response.status === 'connected') {
          // Logged into your app and Facebook.
          mytoken = response.authResponse.accessToken;
          testAPI();
        } else if (response.status === 'not_authorized') {
          // The person is logged into Facebook, but not your app.
          document.getElementById('status').innerHTML = 'アプリ使うにはFacebookログインしてね！';
        } else {
          // The person is not logged into Facebook, so we're not sure if
          // they are logged into this app or not.
          document.getElementById('status').innerHTML = 'アプリ使うにはFacebookログインしてね！';
        }
      }

      // This function is called when someone finishes with the Login
      // Button.  See the onlogin handler attached to it in the sample
      // code below.
      function checkLoginState() {
        /*FB.login(function(response) {
          statusChangeCallback(response);
        }, {scope: 'public_profile, user_friends, read_mailbox, read_page_mailboxes, manage_pages'});*/
        FB.getLoginStatus(function(response) {
          statusChangeCallback(response);
        });
      }

      window.fbAsyncInit = function() {
      FB.init({
        appId      : '1603607446564303',
        cookie     : true,  // enable cookies to allow the server to access
                            // the session
        xfbml      : true,  // parse social plugins on this page
        version    : 'v2.2' // use version 2.2
      });

      // Now that we've initialized the JavaScript SDK, we call
      // FB.getLoginStatus().  This function gets the state of the
      // person visiting this page and can return one of three states to
      // the callback you provide.  They can be:
      //
      // 1. Logged into your app ('connected')
      // 2. Logged into Facebook, but not your app ('not_authorized')
      // 3. Not logged into Facebook and can't tell if they are logged into
      //    your app or not.
      //
      // These three cases are handled in the callback function.

      FB.getLoginStatus(function(response) {
        statusChangeCallback(response);
      });

      };

      // Load the SDK asynchronously
      (function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
      }(document, 'script', 'facebook-jssdk'));

      // Here we run a very simple test of the Graph API after login is
      // successful.  See statusChangeCallback() for when this call is made.
      function testAPI() {
        console.log('Welcome!  Fetching your information.... ');
        FB.api('/me', function(response) {
          console.log('Successful login for: ' + response.name);
          console.log('https://graph.facebook.com/' + response.id + '/picture');
          myid = response.id;
          myname = response.name;
          profile_img_url = 'https://graph.facebook.com/' + response.id + '/picture';
          //viewRooms();
          document.getElementById('status').innerHTML = 'Thanks for logging in, ' + response.name + '!';

          FB.api('/me/conversations', { access_token: mytoken }, function(conv) {
            console.log('conversations: ', conv);
            for(var i=0; i<5; i++) {
              conversations.push({ id: conv.data[i].id, title: 'no title'});
              //var party = '';
              for(var j=0; j<conv.data[i].participants.data.length; j++) {
                //party = party + conv.data[i].participants.data[j].name + " ";
                $('.room' + String(i+1) + '> .panel-body').append(createMemberIcon(conv.data[i].participants.data[j].id));
              }
              $('.room' + String(i+1) + '> .panel-heading').attr('id', conv.data[i].id);
              //$('.room' + String(i+1) + '> .panel-heading').html(conv.data[i].id);
              //$('.room' + String(i+1) + '> .panel-body').html(party);
            }

            viewRooms();
          });
        });
      }

      function createMemberIcon(id) {
        var memberIcon = $('<img/>').attr("src", 'https://graph.facebook.com/' + id + '/picture').addClass('member-icon');
        return memberIcon;
      }


      //チャットルーム（メッセンジャー連携）
      function viewRooms() {
        // ログイン画面の消去
        $("#login").stop().animate({opacity: 0}, {duration: 600});
        setTimeout(function() {
          $("#login").hide();
          $('#rooms').css('display', 'block');
        }, 600);

        $('.panel-default').click(function(e) {
          console.log(e);
          init(e.target.id);
        });
      }


      // アプリ
      //init();

      // チャット
      // チャット用の変数
      var firstPost = true;
      //var myname = null;
      var socket = io();
      var currentMsg = "";

      // マップ用の変数
      var map;
      var markers = []; // { marker: marker object, name: user name, currentMsg: current masage }
      var mylat, mylong;
      var mytrack;
      // アイコン
      var LeafIcon = L.Icon.extend({
  			options: {
          iconSize: [80, 80], // プロフィール写真のサイズ
          iconAnchor: [40, 40], // プロフィール写真の相対位置
          popupAnchor: [0, -38] // ポップアップの相対位置
  			}
  		});
      var locationIcon; // ここにfacebookのプロフィール画像を入れる

      // チャット開始
      function init(roomid) {
        // ログイン画面の消去
        //$("#login").stop().animate({opacity: 0}, {duration: 600});
        //setTimeout(function() {$("#login").hide();}, 600);
        //$('#login').css('display', 'none');
        $("#rooms").stop().animate({opacity: 0}, {duration: 600});
        setTimeout(function() {$("#rooms").hide();}, 600);
        $('#app').css('display', 'block');

        // Facebookのプロフィール画像をアイコンに設定
        locationIcon = new LeafIcon({iconUrl: profile_img_url});

        // チャット初期投稿
        firstPost = false;
        socket.emit('chat message', {
          id: myid,
          name: myname,
          text: 'チャットに参加しました'
        });
        currentMsg = 'チャットに参加しました';
        $('#m').val('');
        initMap();

        // フォームの送信
        $('form').submit(function() {
          console.log("submit!!: ", $('#m').val());
          // 2回目以降
          if(firstPost === false) {
            socket.emit('chat message', {
              id: myid,
              name: myname,
              text: $('#m').val()
            });
            currentMsg = $('#m').val();
            $('#m').val('');

            markers[0].currentMsg = currentMsg;
            markers[0].marker.setPopupContent('<p>' + currentMsg + '</p>');

            return false;
          }
        });
        // メッセージの取得('chat message': チャット用のメッセージ)
        // msg: { text: text, name: user name }
        socket.on('chat message', function(msg) {
          console.log('chat!!: ', msg);

          var msgtxt = msg.name + ': ' + msg.text;
          var usr = msg.name;
          var fbid = msg.id;
          var txt = msg.text;
          $('#messages').append($('<li/>').text(msgtxt));

          // メッセージリスト13行目以降自動スクロール
          if($('#messages li').length > 12) {
            console.log("li > 12");
            $('#messages').animate({ scrollTop: 49 * $('#messages li').length });
          }

          // メッセージを送信したユーザーのマーカーのポップアップを更新
          for(var i=0; i<markers.length; i++) {
            console.log(markers[i]);
            console.log(usr);
            if(markers[i].id == fbid) {
              console.log(usr, txt);
              console.log(markers[i].marker);
              markers[i].currentMsg = txt;
              markers[i].marker.closePopup();
              markers[i].marker.bindPopup('<p>' + txt + '</p>', { closeButton: false }).openPopup();
            }
          }
        });
      }


      // マップ開始
      // 現在位置の取得と監視
      function initMap() {
        var options = { maximumAge: 600000, timeout: 10000, enableHighAccuracy: false };
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(zoomToLocation, locationError);
          navigator.geolocation.watchPosition(showLocation, locationError);
        }
        else {
          // 現在位置取得できなくてもマップ表示
          createMap(0, 0, '現在位置を取得できませんでした！GPSはONになってるかな？');

          // 位置の送信
          socket.emit('map message', {
            id: myid,
            name: myname,
            lat: 0,
            long: 0
          });
        }
      }

      // マップの作成
      function createMap(lat, long, msg) {
        mylat = lat;
        mylong = long;

        // ポップアップ複数表示ハック
        L.Map = L.Map.extend({
            openPopup: function(popup) {
                //        this.closePopup();  // just comment this
                this._popup = popup;

                return this.addLayer(popup).fire('popupopen', {
                    popup: this._popup
                });
            }
        });

        // マップ
        map = L.map('map', { closePopupOnClick: false }).setView([lat, long], 16);
        L.esri.basemapLayer('Topographic').addTo(map);

        $('.mylocation').css('display', 'block');
        $('.mylocation').click(function() {
          map.panTo([mylat, mylong]);
        });
        var marker = L.marker([lat, long], { alt: 'people', title: myname, icon: locationIcon }).addTo(map);
        marker.bindPopup('<p>' + msg + '</p>', { closeButton: false }).openPopup();
        mytrack = L.polyline([[lat, long]], { color: 'red', weight: 2, dashArray: '5, 5' }).addTo(map);
        console.log("add marker: ", marker);
        markers.push({
          marker: marker,
          id: myid,
          name: myname,
          currentMsg: msg
        });
        console.log(markers[0]);
      }

      // 現在位置へ移動(マップ初期化)
      function zoomToLocation(e) {
        console.log(e);
        // 現在位置の緯度経度
        var lat = e.coords.latitude;
        var long = e.coords.longitude;
        // マップ
        createMap(lat, long, currentMsg);

        // 位置の送信
        socket.emit('map message', {
          name: myname,
          lat: lat,
          long: long,
          id: myid
        });


        // メッセージの取得('map message': マップ用のメッセージ)
        socket.on('map message', function(msg) {
          console.log('map!!: ', msg);
          var othernames = [];
          var nosamename = true;

          console.log(markers[0]);
          // 緯度経度の更新
          for(var i=0; i<markers.length; i++) {
            console.log(markers[i]);
            if(markers[i].id === msg.id) {
              nosamename = false;
              markers[i].marker.setLatLng([msg.lat, msg.long]);
              // 自分の緯度経度の更新
              if(msg.id === myid) {
                mylat = msg.lat;
                mylong = msg.long;
                map.panTo([msg.lat, msg.long]);
                mytrack.addLatLng([msg.lat, msg.long]);
              }
            }
          }

          // 地図上に存在しないユーザー
          if(nosamename === true) {
            console.log("NEW PEOPLE!!");
            // ユーザーのFacebookプロフィール画像を取得
            $.get('https://graph.facebook.com/' + msg.id + '/picture?redirect=false&access_token=' + mytoken, function(response){
              console.log("Data Loaded: " + response.data.url);
              var yourIcon = new LeafIcon({iconUrl: response.data.url});
              var marker = L.marker([msg.lat, msg.long], { alt: 'people', title: msg.name, icon: yourIcon }).addTo(map);
              marker.bindPopup('<p>' + msg.name + '登場！</p>', { closeButton: false }).openPopup();
              map.panTo([msg.lat, msg.long]);
              markers.push({
                marker: marker,
                id: msg.id,
                name: msg.name,
                currentMsg: ''
              });
            });
          }
        });
      }

      // 現在位置の更新
      function showLocation(e) {
        console.log(e);
        var lat = e.coords.latitude;
        var long = e.coords.longitude;
        // 位置の送信
        socket.emit('map message', {
          name: myname,
          lat: lat,
          long: long,
          id: myid
        });
      }

      // 現在位置取得エラー
      function locationError(e) {
        console.log(e);

        // 現在位置取得できなくてもマップ表示
        createMap(0, 0, '現在位置を取得できませんでした！GPSはONになってるかな？');

        // 位置の送信
        socket.emit('map message', {
          name: myname,
          lat: 0,
          long: 0
        });
      }
    </script>

  </body>
</html>
