<!doctype html>
<html>
  <head>
    <title>待ち合わせマップ: The chat and map with Socket.IO</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
    <link rel="stylesheet" href="http://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.css" />
    <style>
      * { margin: 0; padding: 0; box-sizing: border-box; }
      body { font: 26px Helvetica, Arial; }
      /*form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 50%; }*/
      form { background: #E6FAFA; padding: 3px; bottom: 0; width: 100%; font-size: 64px; }
      form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }
      form button { width: 15%; background: #00D0CE; color: #fff; border: none; padding: 10px; }
      #messages { list-style-type: none; margin: 0; padding: 0; height: 600px; overflow: scroll; }
      #messages li { padding: 5px 10px; }
      #messages li:nth-child(odd) { background: #E6FAFA; }

      #head { background:-webkit-gradient(linear, 80% 20%, 10% 21%, from(#00D0CE), to(#008382)); padding: 3px; bottom: 0; width: 100%; }
      .title { padding: 5px 3px 0 10px; font-size: 24pt; color: #fff; }

      /*.chatside { margin: 0; padding: 0; height: 100%; width: 50%; position: fixed; }
      .mapside { margin: 0; padding: 0; height: 100%; width: 50%; margin-left: 50%; position: fixed; }*/
      #map { margin: 0; padding: 0; height: 600px; width: 100%; }
      p { font-size: 26px; }

      .leaflet-label { font: 14px bold "Meiryo"; width: 50px; }
    </style>
  </head>
  <body>
    <div class="row">
      <div class="col-md-12">
        <div id="head"><p class="title">待ち合わせのためのおしゃべりマップ</p></div>
      </div>
    </div>
    <div class="row">
      <div class="col-md-6">
        <div id="map"></div>
      </div>
      <div class="col-md-6">
        <ul id="messages"></ul>
      </div>
    </div>
    <div class="row">
      <div class="col-md-12">
        <form action="">
          <input id="m" autocomplete="off" placeholder="まずは名前を入力" /><button>送信</button>
        </form>
      </div>
    </div>

    <script src="https://cdn.socket.io/socket.io-1.2.0.js"></script>
    <script src="http://code.jquery.com/jquery-1.11.1.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.js"></script>
    <script src="http://cdn.jsdelivr.net/leaflet.esri/latest/esri-leaflet.js"></script>
    <script>
      // チャット用の変数
      var firstPost = true;
      var myname = null;
      var socket = io();
      var currentMsg = "";

      // マップ用の変数
      var map;
      var markers = []; // { marker: marker object, name: user name, currentMsg: current masage }

      // チャット
      // フォームの送信
      $('form').submit(function() {
        console.log("submit!!: ", $('#m').val());
        // 2回目以降
        if(firstPost === false) {
          socket.emit('chat message', {
            name: myname,
            text: $('#m').val()
          });
          currentMsg = $('#m').val();
          $('#m').val('');

          markers[0].currentMsg = currentMsg;
          markers[0].marker.setPopupContent('<p>' + currentMsg + '</p>');

          return false;
        }
        // 初回
        // [Plan] Facebook Login 実装したらアカウント名を利用する
        // [Plan] formのsubmit時じゃなくてログイン後実行('チャットに参加しました'のポスト)
        else {
          firstPost = false;
          myname = $('#m').val();
          $('input').attr('placeholder', '');
          socket.emit('chat message', {
            name: myname,
            text: 'チャットに参加しました'
          });
          currentMsg = 'チャットに参加しました';
          $('#m').val('');
          initMap();

          return false;
        }
      });
      // メッセージの取得('chat message': チャット用のメッセージ)
      // msg: { text: text, name: user name }
      socket.on('chat message', function(msg) {
        console.log('chat!!: ', msg);

        var msgtxt = msg.name + ': ' + msg.text;
        var usr = msg.name;
        var txt = msg.text;
        $('#messages').append($('<li/>').text(msgtxt));

        // メッセージリスト13行目以降自動スクロール
        if($('#messages li').length > 12) {
          console.log("li > 12");
          $('#messages').animate({ scrollTop: 300 });
        }

        // メッセージを送信したユーザーのマーカーのポップアップを更新
        for(var i=0; i<markers.length; i++) {
          console.log(markers[i]);
          console.log(usr);
          if(markers[i].name == usr) {
            console.log(usr, txt);
            console.log(markers[i].marker);
            markers[i].currentMsg = txt;
            markers[i].marker.bindPopup('<p>' + txt + '</p>', { closeButton: false }).openPopup();
          }
        }
      });

      // マップ
      // 現在位置の取得と監視
      function initMap() {
        var options = { maximumAge: 600000, timeout: 10000, enableHighAccuracy: false };
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(zoomToLocation, locationError);
          navigator.geolocation.watchPosition(showLocation, locationError);
        }
        else {
          // 現在位置取得できなくてもマップ表示
          createMap(139, 35, '現在位置を取得できませんでした！GPSはONになってるかな？');
        }
      }

      function createMap(lat, long, msg) {
        // マップ
        map = L.map('map', { closePopupOnClick: false }).setView([lat, long], 16);
        L.esri.basemapLayer('Topographic').addTo(map);
        //var marker = L.marker([lat, long], { alt: 'people', title: myname }).bindLabel(myname, { noHide: true }).addTo(map);
        var marker = L.marker([lat, long], { alt: 'people', title: myname }).addTo(map);
        marker.bindPopup('<p>' + msg + '</p>', { closeButton: false }).openPopup();
        console.log("add marker: ", marker);
        markers.push({
          marker: marker,
          name: myname,
          currentMsg: msg
        });
        console.log(markers[0]);
      }

      // 現在位置へ移動(マップ初期化)
      function zoomToLocation(e) {
        console.log(e);
        // 現在位置の緯度経度
        var lat = e.coords.latitude;
        var long = e.coords.longitude;
        // マップ
        createMap(lat, long, currentMsg);

        // 位置の送信
        socket.emit('map message', {
          name: myname,
          lat: lat,
          long: long
        });


        // メッセージの取得('map message': マップ用のメッセージ)
        // msg: { name: user name, lat: latitude, long: longitude }
        socket.on('map message', function(msg) {
          console.log('map!!: ', msg);
          var othernames = [];
          var nosamename = true;

          console.log(markers[0]);
          for(var i=0; i<markers.length; i++) {
            console.log(markers[i]);
            if(markers[i].name === msg.name) {
              nosamename = false;
              markers[i].marker.setLatLng([msg.lat, msg.long]);
              if(msg.name === myname) {
                map.panTo([msg.lat, msg.long]);
              }
            }
          }

          if(nosamename === true) {
            console.log("NEW PEOPLE!!");
            //var marker = L.marker([msg.lat, msg.long], { alt: 'people', title: msg.name }).bindLabel(msg.name, { noHide: true }).addTo(map);
            var marker = L.marker([msg.lat, msg.long], { alt: 'people', title: msg.name }).addTo(map);
            marker.bindPopup('<p>' + msg.name + '登場！</p>', { closeButton: false }).openPopup();
            markers.push({
              marker: marker,
              name: msg.name,
              currentMsg: ''
            });
          }
        });
      }

      // 現在位置の更新
      function showLocation(e) {
        console.log(e);
        var lat = e.coords.latitude;
        var long = e.coords.longitude;
        // 位置の送信
        socket.emit('map message', {
          name: myname,
          lat: lat,
          long: long
        });
      }

      // 現在位置取得エラー
      function locationError(e) {
        console.log(e);

        // 現在位置取得できなくてもマップ表示
        createMap(139, 35, '現在位置を取得できませんでした！GPSはONになってるかな？');

        // 位置の送信
        socket.emit('map message', {
          name: myname,
          lat: lat,
          long: long
        });
      }
    </script>

  </body>
</html>
